package Principal;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Public, Main, If, Else, Do, While, For, Scanner, Print, Print_ln, S_linea, Comillas, Igual, Suma, Resta, Multiplicacion, 
    Division, Op_logico, Op_relacional, Op_atribucion, Op_incremento, Op_booleano, Parentesis_Apertura, Parentesis_Cierre, Llave_Apertura, 
    Llave_Cierre, Corchete_Apertura, Corchete_Cierre, P_coma, Identificador, Cadena, T_dato, Numero, ERROR;

non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, IMPRESION;

start with INICIO;

INICIO ::= 
    Public Main Parentesis_Apertura Parentesis_Cierre Llave_Apertura SENTENCIA Llave_Cierre |
    Public Main Parentesis_Apertura Parentesis_Cierre Llave_Apertura Llave_Cierre |
    Main Parentesis_Apertura Parentesis_Cierre Llave_Apertura Llave_Cierre
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;
DECLARACION ::= 
    T_dato Identificador P_coma | 
    T_dato Identificador Op_atribucion Numero P_coma |
    T_dato Identificador Igual Numero P_coma |
    T_dato Identificador Op_incremento P_coma | 
    T_dato Op_incremento Identificador P_coma | 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma |
    IMPRESION
;
IMPRESION ::= Print Parentesis_Apertura Parentesis_Cierre P_coma
;
IF ::= If Parentesis_Apertura SENTENCIA_BOOLEANA Parentesis_Cierre Llave_Apertura SENTENCIA Llave_Cierre
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= If Parentesis_Apertura SENTENCIA_BOOLEANA Parentesis_Cierre Llave_Apertura SENTENCIA Llave_Cierre Else Llave_Apertura SENTENCIA Llave_Cierre
;
WHILE ::= While Parentesis_Apertura SENTENCIA_BOOLEANA Parentesis_Cierre Llave_Apertura SENTENCIA Llave_Cierre
;
DO_WHILE ::= Do Llave_Apertura SENTENCIA Llave_Cierre While Parentesis_Apertura SENTENCIA_BOOLEANA Parentesis_Cierre P_coma
;
FOR ::= For Parentesis_Apertura SENTENCIA_FOR Parentesis_Cierre Llave_Apertura SENTENCIA Llave_Cierre
;
SENTENCIA_FOR ::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;
