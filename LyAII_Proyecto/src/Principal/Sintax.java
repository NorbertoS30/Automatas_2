
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 04 16:40:38 CDT 2021
//----------------------------------------------------

package Principal;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 04 16:40:38 CDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\002\007\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\005\000\002\003\004\000\002\003\003\000\002\004" +
    "\005\000\002\004\007\000\002\004\007\000\002\004\006" +
    "\000\002\004\006\000\002\004\010\000\002\004\010\000" +
    "\002\004\011\000\002\004\011\000\002\004\003\000\002" +
    "\015\006\000\002\006\011\000\002\013\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\006" +
    "\000\002\013\007\000\002\007\015\000\002\010\011\000" +
    "\002\011\013\000\002\012\011\000\002\014\012\000\002" +
    "\014\011\000\002\005\005\000\002\005\004\000\002\005" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\006\004\005\005\004\001\002\000\004\032" +
    "\177\001\002\000\004\005\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\032\011\001" +
    "\002\000\004\033\012\001\002\000\004\034\013\001\002" +
    "\000\020\006\020\011\015\012\027\014\031\035\016\042" +
    "\022\043\023\001\002\000\022\006\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\014\ufff6\035\ufff6\042\ufff6\043\ufff6\001\002\000" +
    "\004\032\171\001\002\000\004\002\uffff\001\002\000\022" +
    "\006\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\035\ufff3\042" +
    "\ufff3\043\ufff3\001\002\000\004\032\157\001\002\000\022" +
    "\006\ufffc\010\ufffc\011\ufffc\012\ufffc\014\ufffc\035\ufffc\042" +
    "\ufffc\043\ufffc\001\002\000\004\041\140\001\002\000\006" +
    "\030\123\041\124\001\002\000\022\006\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\014\ufff8\035\ufff8\042\ufff8\043\ufff8\001\002" +
    "\000\022\006\ufffa\010\ufffa\011\ufffa\012\ufffa\014\ufffa\035" +
    "\ufffa\042\ufffa\043\ufffa\001\002\000\022\006\020\010\106" +
    "\011\015\012\027\014\031\035\122\042\022\043\023\001" +
    "\002\000\004\032\035\001\002\000\022\006\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\014\uffe9\035\uffe9\042\uffe9\043\uffe9\001" +
    "\002\000\004\032\032\001\002\000\004\033\033\001\002" +
    "\000\004\040\034\001\002\000\022\006\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\014\uffe8\035\uffe8\042\uffe8\043\uffe8\001\002" +
    "\000\006\041\040\043\037\001\002\000\004\033\076\001" +
    "\002\000\004\041\067\001\002\000\004\020\041\001\002" +
    "\000\004\044\042\001\002\000\004\040\043\001\002\000" +
    "\006\031\045\041\046\001\002\000\004\040\057\001\002" +
    "\000\006\033\uffe6\040\uffe6\001\002\000\004\026\047\001" +
    "\002\000\012\017\051\031\052\041\053\044\050\001\002" +
    "\000\006\033\uffe4\040\uffe4\001\002\000\006\017\054\041" +
    "\055\001\002\000\006\033\uffe5\040\uffe5\001\002\000\006" +
    "\033\uffe3\040\uffe3\001\002\000\006\033\uffe2\040\uffe2\001" +
    "\002\000\004\017\056\001\002\000\006\033\uffe1\040\uffe1" +
    "\001\002\000\006\030\062\041\061\001\002\000\004\033" +
    "\uffdb\001\002\000\006\027\064\030\065\001\002\000\004" +
    "\041\063\001\002\000\004\033\uffd8\001\002\000\004\044" +
    "\066\001\002\000\004\033\uffd9\001\002\000\004\033\uffda" +
    "\001\002\000\004\020\070\001\002\000\004\044\071\001" +
    "\002\000\004\040\072\001\002\000\006\031\045\041\046" +
    "\001\002\000\004\040\074\001\002\000\006\030\062\041" +
    "\061\001\002\000\004\033\uffdc\001\002\000\004\034\077" +
    "\001\002\000\016\006\020\011\015\012\027\014\031\042" +
    "\022\043\023\001\002\000\022\006\020\010\106\011\015" +
    "\012\027\014\031\035\102\042\022\043\023\001\002\000" +
    "\022\006\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\035\ufff7" +
    "\042\ufff7\043\ufff7\001\002\000\022\006\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\014\uffdd\035\uffdd\042\uffdd\043\uffdd\001\002" +
    "\000\022\006\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\035" +
    "\ufff4\042\ufff4\043\ufff4\001\002\000\022\006\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\014\ufffd\035\ufffd\042\ufffd\043\ufffd\001" +
    "\002\000\022\006\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\035\ufff9\042\ufff9\043\ufff9\001\002\000\004\034\112\001" +
    "\002\000\022\006\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb" +
    "\035\ufffb\042\ufffb\043\ufffb\001\002\000\004\010\106\001" +
    "\002\000\022\006\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5" +
    "\035\ufff5\042\ufff5\043\ufff5\001\002\000\016\006\020\011" +
    "\015\012\027\014\031\042\022\043\023\001\002\000\022" +
    "\006\020\010\106\011\015\012\027\014\031\035\114\042" +
    "\022\043\023\001\002\000\004\011\115\001\002\000\004" +
    "\032\116\001\002\000\006\031\045\041\046\001\002\000" +
    "\004\033\120\001\002\000\004\040\121\001\002\000\022" +
    "\006\uffde\010\uffde\011\uffde\012\uffde\014\uffde\035\uffde\042" +
    "\uffde\043\uffde\001\002\000\004\002\000\001\002\000\004" +
    "\041\136\001\002\000\012\020\130\027\125\030\127\040" +
    "\126\001\002\000\004\044\134\001\002\000\022\006\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\014\ufff2\035\ufff2\042\ufff2\043" +
    "\ufff2\001\002\000\004\040\133\001\002\000\004\044\131" +
    "\001\002\000\004\040\132\001\002\000\022\006\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\014\ufff0\035\ufff0\042\ufff0\043\ufff0" +
    "\001\002\000\022\006\uffef\010\uffef\011\uffef\012\uffef\014" +
    "\uffef\035\uffef\042\uffef\043\uffef\001\002\000\004\040\135" +
    "\001\002\000\022\006\ufff1\010\ufff1\011\ufff1\012\ufff1\014" +
    "\ufff1\035\ufff1\042\ufff1\043\ufff1\001\002\000\004\040\137" +
    "\001\002\000\022\006\uffee\010\uffee\011\uffee\012\uffee\014" +
    "\uffee\035\uffee\042\uffee\043\uffee\001\002\000\006\020\142" +
    "\027\141\001\002\000\004\017\151\001\002\000\004\017" +
    "\143\001\002\000\006\017\144\041\145\001\002\000\004" +
    "\040\150\001\002\000\004\017\146\001\002\000\004\040" +
    "\147\001\002\000\022\006\uffea\010\uffea\011\uffea\012\uffea" +
    "\014\uffea\035\uffea\042\uffea\043\uffea\001\002\000\022\006" +
    "\uffec\010\uffec\011\uffec\012\uffec\014\uffec\035\uffec\042\uffec" +
    "\043\uffec\001\002\000\006\017\152\041\153\001\002\000" +
    "\004\040\156\001\002\000\004\017\154\001\002\000\004" +
    "\040\155\001\002\000\022\006\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\014\uffeb\035\uffeb\042\uffeb\043\uffeb\001\002\000\022" +
    "\006\uffed\010\uffed\011\uffed\012\uffed\014\uffed\035\uffed\042" +
    "\uffed\043\uffed\001\002\000\006\031\045\041\046\001\002" +
    "\000\004\033\161\001\002\000\004\034\162\001\002\000" +
    "\016\006\020\011\015\012\027\014\031\042\022\043\023" +
    "\001\002\000\022\006\020\010\106\011\015\012\027\014" +
    "\031\035\164\042\022\043\023\001\002\000\024\006\uffe7" +
    "\007\165\010\uffe7\011\uffe7\012\uffe7\014\uffe7\035\uffe7\042" +
    "\uffe7\043\uffe7\001\002\000\004\034\166\001\002\000\016" +
    "\006\020\011\015\012\027\014\031\042\022\043\023\001" +
    "\002\000\022\006\020\010\106\011\015\012\027\014\031" +
    "\035\170\042\022\043\023\001\002\000\022\006\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\014\uffe0\035\uffe0\042\uffe0\043\uffe0" +
    "\001\002\000\006\031\045\041\046\001\002\000\004\033" +
    "\173\001\002\000\004\034\174\001\002\000\016\006\020" +
    "\011\015\012\027\014\031\042\022\043\023\001\002\000" +
    "\022\006\020\010\106\011\015\012\027\014\031\035\176" +
    "\042\022\043\023\001\002\000\022\006\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\014\uffdf\035\uffdf\042\uffdf\043\uffdf\001\002" +
    "\000\004\033\200\001\002\000\004\034\201\001\002\000" +
    "\004\035\202\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\025\004\020\006\024\007\023\010\013\012\016\015\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\103\006\106\007\104\010\100" +
    "\011\107\012\102\015\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\072\001\001\000\002\001\001\000\004\005\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\077" +
    "\004\020\006\024\007\023\010\013\012\016\015\027\001" +
    "\001\000\020\004\103\006\106\007\104\010\100\011\107" +
    "\012\102\015\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\110\001" +
    "\001\000\002\001\001\000\020\003\112\004\020\006\024" +
    "\007\023\010\013\012\016\015\027\001\001\000\020\004" +
    "\103\006\106\007\104\010\100\011\107\012\102\015\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\162\004\020\006\024\007\023\010" +
    "\013\012\016\015\027\001\001\000\020\004\103\006\106" +
    "\007\104\010\100\011\107\012\102\015\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\166\004\020" +
    "\006\024\007\023\010\013\012\016\015\027\001\001\000" +
    "\020\004\103\006\106\007\104\010\100\011\107\012\102" +
    "\015\027\001\001\000\002\001\001\000\004\013\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\174" +
    "\004\020\006\024\007\023\010\013\012\016\015\027\001" +
    "\001\000\020\004\103\006\106\007\104\010\100\011\107" +
    "\012\102\015\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FOR ::= For Parentesis_Apertura SENTENCIA_FOR Parentesis_Cierre Llave_Apertura SENTENCIA Llave_Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DO_WHILE ::= Do Llave_Apertura SENTENCIA Llave_Cierre While Parentesis_Apertura SENTENCIA_BOOLEANA Parentesis_Cierre P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // WHILE ::= While Parentesis_Apertura SENTENCIA_BOOLEANA Parentesis_Cierre Llave_Apertura SENTENCIA Llave_Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF_ELSE ::= If Parentesis_Apertura SENTENCIA_BOOLEANA Parentesis_Cierre Llave_Apertura SENTENCIA Llave_Cierre Else Llave_Apertura SENTENCIA Llave_Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF ::= If Parentesis_Apertura SENTENCIA_BOOLEANA Parentesis_Cierre Llave_Apertura SENTENCIA Llave_Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IMPRESION ::= Print Parentesis_Apertura Parentesis_Cierre P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRESION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parentesis_Apertura Parentesis_Cierre Llave_Apertura Llave_Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Public Main Parentesis_Apertura Parentesis_Cierre Llave_Apertura Llave_Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Public Main Parentesis_Apertura Parentesis_Cierre Llave_Apertura SENTENCIA Llave_Cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

